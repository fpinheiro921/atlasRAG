rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate user profile data
    function isValidProfile() {
      let profile = request.resource.data.profile;
      return profile.age is number && profile.age > 0 && profile.age < 120
        && profile.sex in ["male", "female"]
        && profile.dietHistory in ["low", "medium", "high", "perpetual"]
        && profile.metabolicAdaptationFactor is number
        && profile.metabolicAdaptationFactor >= 0
        && profile.metabolicAdaptationFactor <= 0.30;
    }

    // Helper function to validate body fat percentage
    function isValidBodyFat(bf) {
      return bf is number && bf >= 3 && bf <= 60;
    }

    // Users collection - public profile information
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidProfile();
      allow update: if isOwner(userId) && isValidProfile();
      allow delete: if false; // Users cannot delete their own profile document

      // Goals subcollection
      match /goals/{goalId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
          && request.resource.data.type in ["fat_loss", "reverse_dieting", "maintenance"]
          && request.resource.data.isActive is bool
          && request.resource.data.startDate is timestamp
          && request.resource.data.startWeightKg is number
          && request.resource.data.startWeightKg > 0;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }

      // Daily check-ins subcollection
      match /dailyCheckIns/{checkInId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
          && request.resource.data.date is timestamp
          && request.resource.data.weightKg is number
          && request.resource.data.weightKg > 0;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }

      // Food log entries subcollection
      match /foodLogEntries/{logEntryId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
          && request.resource.data.date is timestamp
          && request.resource.data.calories is number
          && request.resource.data.calories >= 0
          && request.resource.data.proteinG is number
          && request.resource.data.proteinG >= 0;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }

      // Chat history subcollection (for RAG)
      match /chatHistory/{chatId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
          && request.resource.data.timestamp is timestamp
          && request.resource.data.role in ["user", "assistant"];
        allow update: if false; // Chat messages are immutable
        allow delete: if isOwner(userId);
      }
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
